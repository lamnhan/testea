{"docsUrl":"https://lamnhan.com/testea","repoUrl":"https://github.com/lamnhan/testea.git","recordMenu":{"README.md":{"title":"Readme","level":1,"articleId":"README.md","type":"file","ext":"md","slug":"README"},"terminology.html":{"title":"Terminology","level":1,"articleId":"terminology.html","type":"web","ext":"html","slug":"terminology"},"installation.html":{"title":"Installation","level":1,"articleId":"installation.html","type":"web","ext":"html","slug":"installation"},"overview.html":{"title":"API Overview","level":1,"articleId":"overview.html","type":"web","ext":"html","slug":"overview"},"mocking.html":{"title":"Mocking","level":1,"articleId":"mocking.html","type":"web","ext":"html","slug":"mocking"},"rewiring.html":{"title":"Rewiring","level":1,"articleId":"rewiring.html","type":"web","ext":"html","slug":"rewiring"},"stubbing.html":{"title":"Stubbing","level":1,"articleId":"stubbing.html","type":"web","ext":"html","slug":"stubbing"},"the-cli.html":{"title":"The CLI","level":1,"articleId":"the-cli.html","type":"web","ext":"html","slug":"the-cli"}},"recordArticles":{"README.md":{"title":"Readme","originalSrc":"https://github.com/lamnhan/testea/blob/master/README.md","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/README.md","type":"file","ext":"md","slug":"README","content":"<section id=\"head\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n# @lamnhan/testea\n\n**Rewiring, mocking & stubbing for testea modules in Node.**\n\n</section>\n\n<section id=\"header\">\n\n[![License][license_badge]][license_url]\n[![Code Style: Google](https://img.shields.io/badge/code%20style-google-blueviolet.svg)](https://github.com/google/gts)\n[![Support me on Patreon][patreon_badge]][patreon_url]\n[![PayPal][paypal_donate_badge]][paypal_donate_url]\n[![Ask me anything][ask_me_badge]][ask_me_url]\n\n[license_badge]: https://img.shields.io/github/license/mashape/apistatus.svg\n[license_url]: https://github.com/lamnhan/seminjecto/blob/master/LICENSE\n[patreon_badge]: https://lamnhan.github.io/assets/images/badges/patreon.svg\n[patreon_url]: https://www.patreon.com/lamnhan\n[paypal_donate_badge]: https://lamnhan.github.io/assets/images/badges/paypal_donate.svg\n[paypal_donate_url]: https://www.paypal.me/lamnhan\n[ask_me_badge]: https://img.shields.io/badge/ask/me-anything-1abc9c.svg\n[ask_me_url]: https://m.me/lamhiennhan\n\n</section>\n\n<section id=\"installation\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\nInstall globaly, as a CLI:\n\n`npm install -g @lamnhan/testea`\n\nOr localy:\n\n`npm install --save-dev @lamnhan/testea`\n\nUse the library:\n\n```ts\nimport { mockService } from \"@lamnhan/testea\";\n\nconst mocked = mockService({\n  a: () => 1,\n  b: async () => 2,\n});\n\n// test begins\n```\n\n</section>\n\n<section id=\"main\">\n\nSee the documentation at: <http://lamnhan.com/testea>\n\n</section>\n\n<section id=\"license\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n## License\n\n**@lamnhan/testea** is released under the [MIT](https://github.com/lamnhan/testea/blob/master/LICENSE) license.\n\n</section>\n\n<section id=\"attr\">\n\n---\n\n⚡️ This document is generated automatically using [@lamnhan/ayedocs](https://github.com/lamnhan/ayedocs).\n\n</section>\n","toc":[]},"terminology.html":{"title":"Terminology","originalSrc":"https://lamnhan.com/testea/terminology.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/terminology.html","type":"web","ext":"html","slug":"terminology","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<ul>\n<li><a href=\"#-module-and-mocked-module\"><code>Module</code> and <code>mocked module</code></a></li>\n<li><a href=\"#-service-and-mocked-service\"><code>Service</code> and <code>mocked service</code></a></li>\n<li><a href=\"#-stub\"><code>Stub</code></a></li>\n</ul>\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n\n<a href=\"#module-and-mocked-module\" id=\"module-and-mocked-module\" style=\"color: inherit; text-decoration: none;\">\n  <h2><code>Module</code> and <code>mocked module</code></h2>\n</a>\n<p>A <strong>module</strong> is a dependency or a file that is imported by your code. Example: <code>path</code> module, <code>module1</code> module, ...</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { resolve } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { something } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./module1&quot;</span>;\n</code></pre>\n<p>There are 3 kinds of module:</p>\n<ul>\n<li><strong>Native</strong>: Node builtin modules</li>\n<li><strong>Installed</strong>: installed <code>node_modules/</code> dependencies</li>\n<li><strong>Local</strong>: any files in the <code>src/</code> folder</li>\n</ul>\n<p>A <strong>mocked module</strong> is a module that was created to replace the original module for testea purpose.</p>\n\n<a href=\"#service-and-mocked-service\" id=\"service-and-mocked-service\" style=\"color: inherit; text-decoration: none;\">\n  <h2><code>Service</code> and <code>mocked service</code></h2>\n</a>\n<p>A <strong>service</strong> is an exported member of a <strong>module</strong>, usually an exported <code>class</code> in a module. Example: <code>MyService</code> service, <code>AnotherService</code> service, ...</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { MyService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./module1&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { AnotherService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./module2&quot;</span>;\n</code></pre>\n<p>A <strong>mocked service</strong> is a service that was created to replace the original service for testea purpose.</p>\n\n<a href=\"#stub\" id=\"stub\" style=\"color: inherit; text-decoration: none;\">\n  <h2><code>Stub</code></h2>\n</a>\n<p><strong>Stubbing</strong> is an action that replace a <strong>method</strong> of a <strong>server</strong> with a mocked one. Stubbing is useful when a method depends on other methods within the same service.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyService</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> useTheAMethod = <span class=\"hljs-built_in\">this</span>.a();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n  }\n}\n</code></pre>\n<p>When testea the <code>b()</code> method, we can set the <code>a()</code> method to returns whatever we want without actually calling it.</p>\n</section>\n","toc":[{"title":"`Module` and `mocked module`","level":2,"id":"-module-and-mocked-module"},{"title":"`Service` and `mocked service`","level":2,"id":"-service-and-mocked-service"},{"title":"`Stub`","level":2,"id":"-stub"}]},"installation.html":{"title":"Installation","originalSrc":"https://lamnhan.com/testea/installation.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/installation.html","type":"web","ext":"html","slug":"installation","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n\n\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<p>Install globaly, as a CLI:</p>\n<p><code>npm install -g @lamnhan/testea</code></p>\n<p>Or localy:</p>\n<p><code>npm install --save-dev @lamnhan/testea</code></p>\n<p>Use the library:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { mockService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@lamnhan/testea&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> mocked = mockService({\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-number\">2</span>,\n});\n\n<span class=\"hljs-comment\">// test begins</span>\n</code></pre>\n</section>\n","toc":[]},"overview.html":{"title":"API Overview","originalSrc":"https://lamnhan.com/testea/overview.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/overview.html","type":"web","ext":"html","slug":"overview","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n\n\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<table class=\"table\">\n<thead>\n<tr>\n<th>Exports</th>\n<th>Returns type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>rewiremock</code></td>\n<td><a href=\"https://github.com/theKashey/rewiremock\"><code>rewiremock</code></a></td>\n<td>The rewiremock instance (for manually rewiring)</td>\n</tr>\n<tr>\n<td><code>sinon</code></td>\n<td><a href=\"http://sinonjs.org/\"><code>sinon</code></a></td>\n<td>The sinon instance</td>\n</tr>\n<tr>\n<td><a href=\"https://lamnhan.com/testea/api/index.html#mockmodule\"><code>mockModule(members)</code></a></td>\n<td><a data-sref=\"MockBuilder\" href=\"https://lamnhan.com/testea/reference/classes/mockbuilder.html\"><code>MockBuilder</code></a></td>\n<td>Create a mock module</td>\n</tr>\n<tr>\n<td><a href=\"https://lamnhan.com/testea/api/index.html#mockservice\"><code>mockService(members)</code></a></td>\n<td><a data-sref=\"MockBuilder\" href=\"https://lamnhan.com/testea/reference/classes/mockbuilder.html\"><code>MockBuilder</code></a></td>\n<td>Create a mock service</td>\n</tr>\n<tr>\n<td><a href=\"https://lamnhan.com/testea/api/index.html#rewiremodule\"><code>rewireModule(input, mockedModules)</code></a></td>\n<td><a data-sref=\"ModuleRewiring\" href=\"https://lamnhan.com/testea/reference/classes/modulerewiring.html\"><code>ModuleRewiring</code></a></td>\n<td>Rewire a service</td>\n</tr>\n<tr>\n<td><a href=\"https://lamnhan.com/testea/api/index.html#rewireservice\"><code>rewireService(serviceConstructor, mockedServices, withStubs)</code></a></td>\n<td><a data-sref=\"ServiceRewiring\" href=\"https://lamnhan.com/testea/reference/classes/servicerewiring.html\"><code>ServiceRewiring</code></a></td>\n<td>Rewire a service</td>\n</tr>\n<tr>\n<td><a href=\"https://lamnhan.com/testea/api/index.html#rewirefull\"><code>rewireFull(input, mockedModules, serviceInterface, mockedServices, withStubs)</code></a></td>\n<td><a data-sref=\"FullRewiring\" href=\"https://lamnhan.com/testea/reference/classes/fullrewiring.html\"><code>FullRewiring</code></a></td>\n<td>Rewiring both module &amp; service</td>\n</tr>\n</tbody></table>\n</section>\n","toc":[]},"mocking.html":{"title":"Mocking","originalSrc":"https://lamnhan.com/testea/mocking.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/mocking.html","type":"web","ext":"html","slug":"mocking","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<ul>\n<li><a href=\"#-mockmodule-members-https-lamnhan-com-testea-index-html-mockmodule\"><a href=\"https://lamnhan.com/testea/index.html#mockmodule\"><code>mockModule(members)</code></a></a></li>\n<li><a href=\"#-mockservice-members-https-lamnhan-com-testea-index-html-mockservice\"><a href=\"https://lamnhan.com/testea/index.html#mockservice\"><code>mockService(members)</code></a></a></li>\n<li><a href=\"#the-mockbuilder-https-lamnhan-com-testea-classes-mockbuilder-html\">The <a href=\"https://lamnhan.com/testea/classes/mockbuilder.html\"><code>MockBuilder</code></a></a><ul>\n<li><a href=\"#mocked-returns\">Mocked returns</a></li>\n<li><a href=\"#instance-methods\">Instance methods</a></li>\n</ul>\n</li>\n<li><a href=\"#the-mockedresult-https-lamnhan-com-testea-classes-mockedresult-html\">The <a href=\"https://lamnhan.com/testea/classes/mockedresult.html\"><code>MockedResult</code></a></a></li>\n<li><a href=\"#mocking-example\">Mocking example</a></li>\n</ul>\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n\n<a href=\"#mockmodulemembers\" id=\"mockmodulemembers\" style=\"color: inherit; text-decoration: none;\">\n  <h2><a href=\"https://lamnhan.com/testea/index.html#mockmodule\"><code>mockModule(members)</code></a></h2>\n</a>\n<p>Create a mock module for testea purpose, this method is a proxy to the <a href=\"#the-mockbuilder\"><code>MockBuilder</code></a>.</p>\n<p>The original module, for example:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// do something</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// do somthing else</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;nothing at all&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> { a, b };\n</code></pre>\n<p>Create a mocked version of the original module:</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> mockedModule = mockModule({\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&quot;something else&quot;</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-string\">&quot;never&quot;</span>,\n});\n\n<span class=\"hljs-comment\">// start using the mocked module</span>\n</code></pre>\n\n<a href=\"#mockservicemembers\" id=\"mockservicemembers\" style=\"color: inherit; text-decoration: none;\">\n  <h2><a href=\"https://lamnhan.com/testea/index.html#mockservice\"><code>mockService(members)</code></a></h2>\n</a>\n<p>Create a mock service for testea purpose, this method is a proxy to the <a href=\"#the-mockbuilder\"><code>MockBuilder</code></a>. See <a href=\"#mockmodulemembers\"><code>mockModule</code></a> for usage info.</p>\n\n<a href=\"#the-mockbuilder\" id=\"the-mockbuilder\" style=\"color: inherit; text-decoration: none;\">\n  <h2>The <a href=\"https://lamnhan.com/testea/classes/mockbuilder.html\"><code>MockBuilder</code></a></h2>\n</a>\n<p>The <a href=\"https://lamnhan.com/testea/classes/mockbuilder.html\"><code>MockBuilder</code></a> constructor create a mocked object for mocking modules and services.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> mocked = <span class=\"hljs-keyword\">new</span> MockBuilder({\n  <span class=\"hljs-string\">&quot;.A&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// prop &#x27;A&#x27; contains a value of 0</span>\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// method &#x27;a&#x27; returns 1</span>\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// method &#x27;b&#x27; async returns 2</span>\n});\n</code></pre>\n<p>The <a href=\"#the-mockbuilder\"><code>MockBuilder</code></a> create a mocked instance of any modules or services with every method defined in the <code>members</code> param. When a method is called, the mocked instance record all arguments and returns a value that defined by the <code>members</code> param.</p>\n<p><strong>Note</strong>: To mock a property, just add a <code>.</code> before the property name.</p>\n\n<a href=\"#mocked-returns\" id=\"mocked-returns\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Mocked returns</h3>\n</a>\n<p>These are the supported returns values.</p>\n<ul>\n<li><code>*</code>: returns <code>this</code> (the mocked instance)</li>\n<li><code>.</code>: returns the first argument</li>\n<li><code>.$</code>: async returns the first argument</li>\n<li><code>...</code>: returns the list of arguments</li>\n<li><code>...$</code>: async returns the list of arguments</li>\n<li><code>!</code>: throws an error, with custom message: <code>!=The message!</code></li>\n<li><code>!$</code>: async reject, with custom message: <code>!$=The message!</code></li>\n<li><code>Function</code>: returns the result of this function (with the same arguments as the original method)</li>\n<li><code>any</code>: returns as is: <code>string</code>, <code>number</code>, <code>boolean</code>, <code>{}</code>, <code>any[]</code></li>\n</ul>\n\n<a href=\"#instance-methods\" id=\"instance-methods\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Instance methods</h3>\n</a>\n<p>A <a href=\"#the-mockbuilder\"><code>MockBuilder</code></a> instance provides these methods for retrieving testea data.</p>\n<ul>\n<li><code>getProp(prop)</code>: Get a mocked property value</li>\n<li><code>getResult(member)</code>: Get the result for a certain member, returns <code>MockedResult</code>](#the-mockedresult)</li>\n<li><code>getAllReturns()</code>: Get all the data holded by the Returns Keeper</li>\n<li><code>getAllArgs()</code>: Get all the data holded by the Args Keeper</li>\n<li><code>getAllStackedArgs()</code>: Get all the data holded by the StackedArgs Keeper</li>\n</ul>\n\n<a href=\"#the-mockedresult\" id=\"the-mockedresult\" style=\"color: inherit; text-decoration: none;\">\n  <h2>The <a href=\"https://lamnhan.com/testea/classes/mockedresult.html\"><code>MockedResult</code></a></h2>\n</a>\n<p>The <a href=\"https://lamnhan.com/testea/classes/mockedresult.html\"><code>MockedResult</code></a> constructor provide values and methods for testea a mocked method.</p>\n<ul>\n<li><code>getArgs()</code>: Get a list of args</li>\n<li><code>countArgs()</code>: Get the number of args</li>\n<li><code>getArg(position)</code>: Get an arg by paramter position</li>\n<li><code>getArgFirst()</code>: Get the first arg</li>\n<li><code>getArgSecond()</code>: Get the second arg</li>\n<li><code>getArgThird()</code>: Get the third arg</li>\n<li><code>getArgLast()</code>: Get the last arg</li>\n<li><code>getStackedArgs()</code>: Get a list of stacked args</li>\n<li><code>countStackedArgs()</code>: Get the number of stacked args (same as <code>callCount()</code>)</li>\n<li><code>getStackedArgsChild(execution)</code>: Get a list of args by execution order</li>\n<li><code>getStackedArgsFirst()</code>: Get a list of args of the first execution</li>\n<li><code>getStackedArgsSecond()</code>: Get a list of args of the second execution</li>\n<li><code>getStackedArgsThird()</code>: Get a list of args of the third execution</li>\n<li><code>getStackedArgsLast()</code>: Get a list of args of the last execution</li>\n<li><code>getArgInStack(execution, position)</code>: Get an arg by execution order and parameter position</li>\n<li><code>hasBeenCalled()</code>: See if a method has been called</li>\n<li><code>hasBeenCalledWith(...args)</code>: See if a method has been called with certain args</li>\n<li><code>callCount()</code>: Get the number of call</li>\n</ul>\n\n<a href=\"#mocking-example\" id=\"mocking-example\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Mocking example</h2>\n</a>\n<p>An example of how to create a mocked version of a module or a service.</p>\n<p><strong><code>./src/module1.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething1</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// do something</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething2</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// do somthing else</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;nothing at all&quot;</span>;\n}\n</code></pre>\n<p><strong><code>./test/module1.spec.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> mockedModule = mockModule({\n  <span class=\"hljs-attr\">doSomething1</span>: <span class=\"hljs-string\">&quot;any mocked returns value&quot;</span>,\n  <span class=\"hljs-attr\">doSomething2</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-string\">&quot;any mocked returns value&quot;</span>,\n});\n\n<span class=\"hljs-comment\">// start using the mocked module</span>\n</code></pre>\n</section>\n","toc":[{"title":"[`mockModule(members)`](https://lamnhan.com/testea/index.html#mockmodule)","level":2,"id":"-mockmodule-members-https-lamnhan-com-testea-index-html-mockmodule"},{"title":"[`mockService(members)`](https://lamnhan.com/testea/index.html#mockservice)","level":2,"id":"-mockservice-members-https-lamnhan-com-testea-index-html-mockservice"},{"title":"The [`MockBuilder`](https://lamnhan.com/testea/classes/mockbuilder.html)","level":2,"id":"the-mockbuilder-https-lamnhan-com-testea-classes-mockbuilder-html"},{"title":"Mocked returns","level":3,"id":"mocked-returns"},{"title":"Instance methods","level":3,"id":"instance-methods"},{"title":"The [`MockedResult`](https://lamnhan.com/testea/classes/mockedresult.html)","level":2,"id":"the-mockedresult-https-lamnhan-com-testea-classes-mockedresult-html"},{"title":"Mocking example","level":2,"id":"mocking-example"}]},"rewiring.html":{"title":"Rewiring","originalSrc":"https://lamnhan.com/testea/rewiring.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/rewiring.html","type":"web","ext":"html","slug":"rewiring","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<ul>\n<li><a href=\"#-rewiremock\"><code>rewiremock</code></a></li>\n<li><a href=\"#-rewiremodule-input-mockedmodules-https-lamnhan-com-testea-index-html-rewiremodule\"><a href=\"https://lamnhan.com/testea/index.html#rewiremodule\"><code>rewireModule(input, mockedModules)</code></a></a><ul>\n<li><a href=\"#the-modulerewiring-https-lamnhan-com-testea-classes-modulerewiring-html\">The <a href=\"https://lamnhan.com/testea/classes/modulerewiring.html\"><code>ModuleRewiring</code></a></a></li>\n</ul>\n</li>\n<li><a href=\"#-rewireservice-serviceconstructor-mockedservices-withstubs-https-lamnhan-com-testea-index-html-rewireservice\"><a href=\"https://lamnhan.com/testea/index.html#rewireservice\"><code>rewireService(serviceConstructor, mockedServices, withStubs)</code></a></a><ul>\n<li><a href=\"#the-servicerewiring-https-lamnhan-com-testea-classes-servicerewiring-html\">The <a href=\"https://lamnhan.com/testea/classes/servicerewiring.html\"><code>ServiceRewiring</code></a></a></li>\n</ul>\n</li>\n<li><a href=\"#-rewirefull-input-mockedmodules-serviceinterface-mockedservices-withstubs-https-lamnhan-com-testea-index-html-rewirefull\"><a href=\"https://lamnhan.com/testea/index.html#rewirefull\"><code>rewireFull(input, mockedModules, serviceInterface, mockedServices, withStubs)</code></a></a><ul>\n<li><a href=\"#the-fullrewiring-https-lamnhan-com-testea-classes-fullrewiring-html\">The <a href=\"https://lamnhan.com/testea/classes/fullrewiring.html\"><code>FullRewiring</code></a></a></li>\n</ul>\n</li>\n<li><a href=\"#rewiring-examples\">Rewiring examples</a><ul>\n<li><a href=\"#rewire-module\">Rewire module</a></li>\n<li><a href=\"#rewire-service\">Rewire service</a></li>\n</ul>\n</li>\n<li><a href=\"#fully-rewiring\">Fully rewiring</a></li>\n</ul>\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<p>Load modules or services with mocked dependencies.</p>\n<p>A rewiring dependency is resolved by an <code>ID</code>, depending on the kind of a module:</p>\n<ul>\n<li><strong>Native</strong>: the <code>id</code> is the same as the <code>name</code>: <code>path</code>, <code>os</code>, ...</li>\n<li><strong>Installed</strong>: the <code>id</code> is the dependency name prefixed by a <code>~</code>:<ul>\n<li><code>~lodash</code> -&gt; <strong>./node_modules/lodash</strong></li>\n<li><code>~@xxx/abc</code> -&gt; <strong>./node_modules/xxx/abc</strong></li>\n</ul>\n</li>\n<li><strong>Local</strong>: the <code>id</code> is prefixed by a <code>@</code>:<ul>\n<li><code>@src/xxx/abc</code> -&gt; <strong>./src/xxx/abc</strong></li>\n<li>Or <code>@xxx/abc</code> -&gt; <strong>./src/xxx/abc</strong></li>\n</ul>\n</li>\n</ul>\n\n<a href=\"#rewiremock\" id=\"rewiremock\" style=\"color: inherit; text-decoration: none;\">\n  <h2><code>rewiremock</code></h2>\n</a>\n<p>This package also exports a <a href=\"https://github.com/theKashey/rewiremock\"><code>rewiremock</code></a> instance, so that you may rewire modules with the official interface. See more at: <a href=\"https://github.com/theKashey/rewiremock\">https://github.com/theKashey/rewiremock</a></p>\n\n<a href=\"#rewiremoduleinput-mockedmodules\" id=\"rewiremoduleinput-mockedmodules\" style=\"color: inherit; text-decoration: none;\">\n  <h2><a href=\"https://lamnhan.com/testea/index.html#rewiremodule\"><code>rewireModule(input, mockedModules)</code></a></h2>\n</a>\n<p>Load a module with mocked dependencies.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// rewire the &#x27;module1&#x27;</span>\n<span class=\"hljs-keyword\">const</span> module1Rewiring = rewireModule(\n  <span class=\"hljs-comment\">// load the original module</span>\n  <span class=\"hljs-string\">&quot;@src/module1&quot;</span>,\n  <span class=\"hljs-comment\">// (optional) replace dependencies with mocked instances</span>\n  {\n    <span class=\"hljs-attr\">path</span>: {},\n    <span class=\"hljs-string\">&quot;~lodash&quot;</span>: {},\n    <span class=\"hljs-string\">&quot;@xxx/abc&quot;</span>: {},\n  }\n);\n\n<span class=\"hljs-comment\">// start test</span>\nit(<span class=\"hljs-string\">&quot;ok&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// retrieve the rewired module</span>\n  <span class=\"hljs-keyword\">const</span> rewiredModule1 = <span class=\"hljs-keyword\">await</span> module1Rewiring.getModule();\n\n  <span class=\"hljs-comment\">// test a method</span>\n  <span class=\"hljs-keyword\">const</span> result = rewiredModule1.someMethod();\n  expect(result).equal(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n});\n</code></pre>\n\n<a href=\"#the-modulerewiring\" id=\"the-modulerewiring\" style=\"color: inherit; text-decoration: none;\">\n  <h3>The <a href=\"https://lamnhan.com/testea/classes/modulerewiring.html\"><code>ModuleRewiring</code></a></h3>\n</a>\n<p><a href=\"https://lamnhan.com/testea/classes/modulerewiring.html\"><code>ModuleRewiring</code></a> is the constructor of <code>rewireModule</code>, see <code>rewireModule</code> for the list of parameters.</p>\n<table class=\"table\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Returns type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>getModule()</code></td>\n<td><code>Promise&lt;object&gt;</code></td>\n<td>Get the rewired module</td>\n</tr>\n<tr>\n<td><code>getService(name)</code></td>\n<td><code>Promise&lt;class&gt;</code></td>\n<td>Get a service constructor of the mocked module</td>\n</tr>\n<tr>\n<td><code>getMockedModules()</code></td>\n<td><code>object</code></td>\n<td>Get all mocked dependencies</td>\n</tr>\n<tr>\n<td><code>getResult()</code></td>\n<td><code>Promise&lt;object&gt;</code></td>\n<td>Get all data</td>\n</tr>\n</tbody></table>\n\n<a href=\"#rewireserviceserviceconstructor-mockedservices-withstubs\" id=\"rewireserviceserviceconstructor-mockedservices-withstubs\" style=\"color: inherit; text-decoration: none;\">\n  <h2><a href=\"https://lamnhan.com/testea/index.html#rewireservice\"><code>rewireService(serviceConstructor, mockedServices, withStubs)</code></a></h2>\n</a>\n<p>Load a service with mocked dependencies and stubing methods.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { MyService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;module1&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> myServiceRewiring = rewireService(\n  <span class=\"hljs-comment\">// the original or a mocked service constructor extracted from a rewired module</span>\n  MyService,\n  <span class=\"hljs-comment\">// (optional) mocked service dependencies (constructor params)</span>\n  {\n    <span class=\"hljs-string\">&quot;@xxx/abc&quot;</span>: {},\n    <span class=\"hljs-string\">&quot;@xxx/xyz&quot;</span>: {},\n  },\n  <span class=\"hljs-comment\">// (optional) pre-stubing methods</span>\n  {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-number\">2</span>,\n  }\n);\n\n<span class=\"hljs-comment\">// start test</span>\nit(<span class=\"hljs-string\">&quot;ok&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// retrieve the rewired service</span>\n  <span class=\"hljs-keyword\">const</span> rewiredMyService = <span class=\"hljs-keyword\">await</span> myServiceRewiring.getInstance();\n\n  <span class=\"hljs-comment\">// test a method</span>\n  <span class=\"hljs-keyword\">const</span> result = rewiredMyService.someMethod();\n  expect(result).equal(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n});\n</code></pre>\n\n<a href=\"#the-servicerewiring\" id=\"the-servicerewiring\" style=\"color: inherit; text-decoration: none;\">\n  <h3>The <a href=\"https://lamnhan.com/testea/classes/servicerewiring.html\"><code>ServiceRewiring</code></a></h3>\n</a>\n<p><a href=\"https://lamnhan.com/testea/classes/servicerewiring.html\"><code>ServiceRewiring</code></a> is the constructor of <code>rewireService</code>, see <code>rewireService</code> for the list of parameters.</p>\n<table class=\"table\">\n<thead>\n<tr>\n<th>Method</th>\n<th>Returns type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>getInstance()</code></td>\n<td><code>object</code></td>\n<td>Get a instance of the rewired service</td>\n</tr>\n<tr>\n<td><code>getStubbedInstance()</code></td>\n<td><a href=\"#the-mockbuilder\"><code>MockBuilder</code></a></td>\n<td>Get the stubbing result</td>\n</tr>\n<tr>\n<td><code>getMockedServices()</code></td>\n<td><code>object</code></td>\n<td>Get all mocked dependencies</td>\n</tr>\n<tr>\n<td><code>stub(method)</code></td>\n<td><a href=\"https://sinonjs.org/releases/latest/stubs/\"><code>sinon.SinonStub</code></a></td>\n<td>Stub a method of the service</td>\n</tr>\n<tr>\n<td><code>getName()</code></td>\n<td><code>string</code></td>\n<td>Get the name of the service</td>\n</tr>\n<tr>\n<td><code>getResult()</code></td>\n<td><code>object</code></td>\n<td>Get all data</td>\n</tr>\n</tbody></table>\n\n<a href=\"#rewirefullinput-mockedmodules-serviceinterface-mockedservices-withstubs\" id=\"rewirefullinput-mockedmodules-serviceinterface-mockedservices-withstubs\" style=\"color: inherit; text-decoration: none;\">\n  <h2><a href=\"https://lamnhan.com/testea/index.html#rewirefull\"><code>rewireFull(input, mockedModules, serviceInterface, mockedServices, withStubs)</code></a></h2>\n</a>\n<p>Rewire both module &amp; service.</p>\n\n<a href=\"#the-fullrewiring\" id=\"the-fullrewiring\" style=\"color: inherit; text-decoration: none;\">\n  <h3>The <a href=\"https://lamnhan.com/testea/classes/fullrewiring.html\"><code>FullRewiring</code></a></h3>\n</a>\n<p>A <a href=\"https://lamnhan.com/testea/classes/fullrewiring.html\"><code>FullRewiring</code></a> instance provides properties/methods to retrieve data for testea.</p>\n<table class=\"table\">\n<thead>\n<tr>\n<th>method</th>\n<th>Returns type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>rewireModule()</code></td>\n<td><a href=\"#the-modulerewiring\"><code>ModuleRewiring</code></a></td>\n<td>The module rewiring instance</td>\n</tr>\n<tr>\n<td><code>rewireService()</code></td>\n<td><a href=\"#the-servicerewiring\"><code>Promise&lt;ServiceRewiring&gt;</code></a></td>\n<td>The service rewiring instance</td>\n</tr>\n<tr>\n<td><code>getResult()</code></td>\n<td><code>Promise&lt;object&gt;</code></td>\n<td>Get all data</td>\n</tr>\n</tbody></table>\n\n<a href=\"#rewiring-examples\" id=\"rewiring-examples\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Rewiring examples</h2>\n</a>\n<p>All testea examples is using <a href=\"https://mochajs.org/\">mocha</a> as test runner and <a href=\"https://www.chaijs.com/\">chai</a> as assertion tool.</p>\n\n<a href=\"#rewire-module\" id=\"rewire-module\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Rewire module</h3>\n</a>\n<p>An example of how to rewire a module.</p>\n<p><strong><code>./src/module1.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { resolve } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> useExternal = resolve(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n}\n</code></pre>\n<p><strong><code>./test/module1.spec.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { rewireModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@lamnhan/testea&quot;</span>;\n\n<span class=\"hljs-comment\">// setup</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getModule</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rewireModule(\n    <span class=\"hljs-comment\">// load the tested module</span>\n    <span class=\"hljs-string\">&quot;@src/module1&quot;</span>,\n    <span class=\"hljs-comment\">// rewire all dependencies with mocked replacement</span>\n    {\n      <span class=\"hljs-attr\">path</span>: {\n        <span class=\"hljs-attr\">resolve</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&quot;any mocked returns value&quot;</span>,\n        <span class=\"hljs-comment\">// mock other methods of this module</span>\n      },\n    }\n  );\n}\n\n<span class=\"hljs-comment\">// start testea</span>\ndescribe(<span class=\"hljs-string\">&quot;Test module1&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  it(<span class=\"hljs-string\">&quot;#doSomething&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-comment\">// retrieve the rewired module</span>\n    <span class=\"hljs-keyword\">const</span> module1Rewiring = getModule();\n    <span class=\"hljs-keyword\">const</span> rewiredModule1 = <span class=\"hljs-keyword\">await</span> module1Rewiring.getModule();\n\n    <span class=\"hljs-comment\">// test a module member</span>\n    <span class=\"hljs-keyword\">const</span> result = rewiredModule1.doSomething();\n    expect(result).equal(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n  });\n});\n</code></pre>\n\n<a href=\"#rewire-service\" id=\"rewire-service\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Rewire service</h3>\n</a>\n<p>An example of how to rewire a service.</p>\n<p><strong><code>./src/module1.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Service1</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\">param1: <span class=\"hljs-built_in\">any</span></span>)</span> {\n    <span class=\"hljs-comment\">// do something with the &#x27;param1&#x27;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n  }\n}\n</code></pre>\n<p><strong><code>./src/module2.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Service1 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./module1&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Service2</span> </span>{\n  <span class=\"hljs-keyword\">private</span> service1: Service1;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">service1: Service1</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.service1 = service1;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> useExternal = <span class=\"hljs-built_in\">this</span>.service1.doSomething(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n  }\n}\n</code></pre>\n<p><strong><code>./test/module2.spec.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { rewireService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@lamnhan/testea&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> { Service2 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/module2&#x27;</span>;\n\n<span class=\"hljs-comment\">// setup</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getService</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rewireService(\n    <span class=\"hljs-comment\">// rewire this service</span>\n    Service2,\n    <span class=\"hljs-comment\">// replace all dependencies with mocked replacement</span>\n    {\n      <span class=\"hljs-string\">&#x27;@src/module1&#x27;</span>: {\n        <span class=\"hljs-attr\">doSomething1</span>: <span class=\"hljs-string\">&#x27;any mocked returns value&#x27;</span>;\n      },\n    },\n    <span class=\"hljs-comment\">// no stubbing for now</span>\n  );\n}\n\n<span class=\"hljs-comment\">// start testea</span>\ndescribe(<span class=\"hljs-string\">&#x27;Test Service2&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n\n  it(<span class=\"hljs-string\">&#x27;#doSomething2&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-comment\">// retrieve the rewired service</span>\n    <span class=\"hljs-keyword\">const</span> service2Rewiring = getService();\n    <span class=\"hljs-keyword\">const</span> rewiredService2 = <span class=\"hljs-keyword\">await</span> service2Rewiring.getInstance();\n    <span class=\"hljs-comment\">// retrieve a mocked servics for passed argument testea</span>\n    <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-string\">&#x27;@src/module1&#x27;</span>: mockedModule1 } = service2Rewiring.getMockedServices();\n\n    <span class=\"hljs-comment\">// test a module member</span>\n    <span class=\"hljs-keyword\">const</span> result = rewiredService2.doSomething();\n    expect(result).equal(<span class=\"hljs-string\">&#x27;...&#x27;</span>);\n    expect(\n      mockedModule1.getArgFirst(<span class=\"hljs-string\">&#x27;doSomething&#x27;</span>), <span class=\"hljs-comment\">// get the first arg of #doSomething</span>\n    ).equal(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>);\n  });\n\n});\n</code></pre>\n\n<a href=\"#fully-rewiring\" id=\"fully-rewiring\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Fully rewiring</h2>\n</a>\n<p>An example of how to rewire a module and a service with full functionality.</p>\n<p><strong><code>./src/module1.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { resolve } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;path&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { readFile } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs-extra&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> { Service2 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./service2&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyService</span> </span>{\n  <span class=\"hljs-keyword\">private</span> service2: Service2;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">service2: Service2</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.service2 = service2;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> usePath = resolve(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> useFSExtra = readFile(<span class=\"hljs-string\">&quot;xxx.txt&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> useService2 = <span class=\"hljs-built_in\">this</span>.service2.doSomething(<span class=\"hljs-string\">&quot;xxx&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;something&quot;</span>;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">doMore</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> useThis = <span class=\"hljs-built_in\">this</span>.doSomething();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;do more&quot;</span>;\n  }\n}\n</code></pre>\n<p><strong><code>./test/module1.spec.ts</code></strong></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { rewireFull } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@lamnhan/testea&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> { MyService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/module1&#x27;</span>;\n\n<span class=\"hljs-comment\">// setup test</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">\n  stubs: <span class=\"hljs-built_in\">any</span>,\n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rewireFull(\n    <span class=\"hljs-comment\">// load the tested module</span>\n    <span class=\"hljs-string\">&#x27;@src/module1&#x27;</span>, <span class=\"hljs-comment\">// () =&gt; import(&#x27;../src/module1&#x27;)</span>\n    <span class=\"hljs-comment\">// rewire all dependencies with mocked replacement</span>\n    {\n      <span class=\"hljs-string\">&#x27;path&#x27;</span>: {\n        <span class=\"hljs-attr\">resolve</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-string\">&#x27;any mocked returns value&#x27;</span>,\n        <span class=\"hljs-comment\">// mock other methods of this module</span>\n      },\n      <span class=\"hljs-string\">&#x27;~fs-extra&#x27;</span>: {\n        <span class=\"hljs-attr\">readFile</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-string\">&#x27;any mocked returns value&#x27;</span>,\n        <span class=\"hljs-comment\">// mock other methods of this module</span>\n      }\n    }\n    <span class=\"hljs-comment\">// rewire this service</span>\n    MyService,\n    <span class=\"hljs-comment\">// replace all dependencies with mocked replacement</span>\n    {\n      <span class=\"hljs-string\">&#x27;@src/service2&#x27;</span>: {\n        <span class=\"hljs-attr\">doSomething</span>: <span class=\"hljs-string\">&#x27;any mocked returns value&#x27;</span>;\n      },\n    },\n    stubs,\n  )\n  .getResult();\n}\n\n<span class=\"hljs-comment\">// start testea</span>\ndescribe(<span class=\"hljs-string\">&#x27;Test MyService&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n\n  it(<span class=\"hljs-string\">&#x27;#doSomething&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-comment\">// retrieve the data</span>\n    <span class=\"hljs-keyword\">const</span> {\n      service,\n      <span class=\"hljs-attr\">mockedModules</span>: {\n        <span class=\"hljs-string\">&#x27;path&#x27;</span>: mockedPathModuleTestea,\n        <span class=\"hljs-string\">&#x27;~fs-extra&#x27;</span>: mockedFSExtraModuleTestea,\n      },\n      <span class=\"hljs-attr\">mockedServices</span>: {\n        <span class=\"hljs-string\">&#x27;@src/service2&#x27;</span>: mockedService2Testea,\n      }\n    } = <span class=\"hljs-keyword\">await</span> setup();\n\n    <span class=\"hljs-comment\">// test a service method</span>\n    <span class=\"hljs-keyword\">const</span> result = service.doSomething();\n    expect(result).equal(<span class=\"hljs-string\">&#x27;...&#x27;</span>);\n    <span class=\"hljs-comment\">// do more assertions about passed arguments</span>\n    <span class=\"hljs-keyword\">const</span> resolveArgs = mockedPathModuleTestea.getArgFirst(<span class=\"hljs-string\">&#x27;resolve&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> readFileArg = mockedFSExtraModuleTestea.getArgFirst(<span class=\"hljs-string\">&#x27;readFile&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> doSomethingArg = mockedService2Testea.getArgFirst(<span class=\"hljs-string\">&#x27;doSomething&#x27;</span>);\n    expect(resolveArg).equal(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>);\n    expect(readFileArg).equal(<span class=\"hljs-string\">&#x27;xxx.txt&#x27;</span>);\n    expect(doSomethingArg).equal(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>);\n    <span class=\"hljs-comment\">// ...</span>\n  });\n\n  it(<span class=\"hljs-string\">&#x27;#doMore&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-comment\">// retrieve the data</span>\n    <span class=\"hljs-keyword\">const</span> { service } = <span class=\"hljs-keyword\">await</span> setup({\n      <span class=\"hljs-attr\">doSomething</span>: <span class=\"hljs-string\">&#x27;returns something else&#x27;</span>,\n    });\n\n    <span class=\"hljs-comment\">// test a service method</span>\n    <span class=\"hljs-keyword\">const</span> result = service.doMore();\n    expect(result).equal(<span class=\"hljs-string\">&#x27;...&#x27;</span>);\n  });\n\n});\n</code></pre>\n</section>\n","toc":[{"title":"`rewiremock`","level":2,"id":"-rewiremock"},{"title":"[`rewireModule(input, mockedModules)`](https://lamnhan.com/testea/index.html#rewiremodule)","level":2,"id":"-rewiremodule-input-mockedmodules-https-lamnhan-com-testea-index-html-rewiremodule"},{"title":"The [`ModuleRewiring`](https://lamnhan.com/testea/classes/modulerewiring.html)","level":3,"id":"the-modulerewiring-https-lamnhan-com-testea-classes-modulerewiring-html"},{"title":"[`rewireService(serviceConstructor, mockedServices, withStubs)`](https://lamnhan.com/testea/index.html#rewireservice)","level":2,"id":"-rewireservice-serviceconstructor-mockedservices-withstubs-https-lamnhan-com-testea-index-html-rewireservice"},{"title":"The [`ServiceRewiring`](https://lamnhan.com/testea/classes/servicerewiring.html)","level":3,"id":"the-servicerewiring-https-lamnhan-com-testea-classes-servicerewiring-html"},{"title":"[`rewireFull(input, mockedModules, serviceInterface, mockedServices, withStubs)`](https://lamnhan.com/testea/index.html#rewirefull)","level":2,"id":"-rewirefull-input-mockedmodules-serviceinterface-mockedservices-withstubs-https-lamnhan-com-testea-index-html-rewirefull"},{"title":"The [`FullRewiring`](https://lamnhan.com/testea/classes/fullrewiring.html)","level":3,"id":"the-fullrewiring-https-lamnhan-com-testea-classes-fullrewiring-html"},{"title":"Rewiring examples","level":2,"id":"rewiring-examples"},{"title":"Rewire module","level":3,"id":"rewire-module"},{"title":"Rewire service","level":3,"id":"rewire-service"},{"title":"Fully rewiring","level":2,"id":"fully-rewiring"}]},"stubbing.html":{"title":"Stubbing","originalSrc":"https://lamnhan.com/testea/stubbing.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/stubbing.html","type":"web","ext":"html","slug":"stubbing","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<ul>\n<li><a href=\"#manually-stubbing\">Manually stubbing</a></li>\n<li><a href=\"#auto-stubbing\">Auto stubbing</a></li>\n</ul>\n</section>\n\n<section id=\"content\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<p>You can either stubbing a service method manually with <a href=\"https://sinonjs.org\">sinon</a> or automatically using the <a href=\"#rewireserviceserviceconstructor-mockedservices-withstubs\"><code>withStubs</code></a> param.</p>\n<p>To stub methods, you need to retrieve a <a href=\"#the-servicerewiring\"><code>ServiceRewiring</code></a> using <a href=\"#rewireserviceserviceconstructor-mockedservices-withstubs\"><code>rewireService</code></a> or <a href=\"#rewirefullinput-mockedmodules-serviceinterface-mockedservices-withstubs\"><code>rewireFull</code></a> first.</p>\n\n<a href=\"#manually-stubbing\" id=\"manually-stubbing\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Manually stubbing</h2>\n</a>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// rewire the service</span>\n<span class=\"hljs-keyword\">const</span> serviceRewiring = rewireService(MyService);\n<span class=\"hljs-comment\">// stub a method</span>\n<span class=\"hljs-keyword\">const</span> doSomethingStub = serviceRewiring.stub(<span class=\"hljs-string\">&quot;doSomething&quot;</span>).returns(<span class=\"hljs-string\">&quot;anything&quot;</span>);\n<span class=\"hljs-keyword\">const</span> doMoreStub = serviceRewiring.stub(<span class=\"hljs-string\">&quot;doMore&quot;</span>).callsFake(<span class=\"hljs-string\">&quot;do more&quot;</span>);\n</code></pre>\n<p>See more about sinon stubbing at: <a href=\"https://sinonjs.org/releases/latest/stubs/\">https://sinonjs.org/releases/latest/stubs/</a></p>\n\n<a href=\"#auto-stubbing\" id=\"auto-stubbing\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Auto stubbing</h2>\n</a>\n<p>With the <code>withStubs</code> param, you can provide multiple stubbing methods and be able to get the stubed result a <a href=\"#the-mockbuilder\"><code>MockBuilder</code></a> instance.</p>\n<p>A stub can <a href=\"#mocked-returns\">returns</a> any value same as a mocking member.</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-comment\">// rewire the service</span>\n<span class=\"hljs-keyword\">const</span> serviceRewiring = rewireService(\n  MyService,\n  {}, <span class=\"hljs-comment\">// no dependencies</span>\n  {\n    <span class=\"hljs-attr\">doSomething</span>: <span class=\"hljs-string\">&quot;anything&quot;</span>,\n    <span class=\"hljs-attr\">doMore</span>: <span class=\"hljs-keyword\">async</span> () =&gt; <span class=\"hljs-string\">&quot;do more&quot;</span>,\n    <span class=\"hljs-comment\">// more stubs</span>\n  }\n);\n<span class=\"hljs-comment\">// get service &amp; stubbed</span>\n<span class=\"hljs-keyword\">const</span> service = serviceRewiring.getInstance();\n<span class=\"hljs-keyword\">const</span> stubbedService = serviceRewiring.getStubbedInstance();\n<span class=\"hljs-comment\">// testea</span>\n<span class=\"hljs-keyword\">const</span> result = service.doNothing();\n<span class=\"hljs-keyword\">const</span> doSomethingArgs = stubbedService.getResult(<span class=\"hljs-string\">&quot;doSomething&quot;</span>).getArgs();\n<span class=\"hljs-comment\">// do assertion</span>\n</code></pre>\n</section>\n","toc":[{"title":"Manually stubbing","level":2,"id":"manually-stubbing"},{"title":"Auto stubbing","level":2,"id":"auto-stubbing"}]},"the-cli.html":{"title":"The CLI","originalSrc":"https://lamnhan.com/testea/the-cli.html","src":"https://raw.githubusercontent.com/lamnhan/testea/master/docs/api/articles/the-cli.html","type":"web","ext":"html","slug":"the-cli","content":"<section id=\"toc\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<ul>\n<li><a href=\"#cli-command-overview\">Command overview</a></li>\n<li><a href=\"#cli-command-reference\">Command reference</a><ul>\n<li><a href=\"#command-generate\"><code>generate</code></a></li>\n<li><a href=\"#command-help\"><code>help</code></a></li>\n<li><a href=\"#command-*\"><code>*</code></a></li>\n</ul>\n</li>\n</ul>\n</section>\n\n<section id=\"cli\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<h2><a name=\"cli-command-overview\"><p>Command overview</p>\n</a></h2>\n\n<p>Spec file generate, ...</p>\n<ul>\n<li><a href=\"#command-generate\"><code>testea generate</code></a></li>\n<li><a href=\"#command-help\"><code>testea help</code></a></li>\n<li><a href=\"#command-*\"><code>testea *</code></a></li>\n</ul>\n<h2><a name=\"cli-command-reference\"><p>Command reference</p>\n</a></h2>\n\n<h3><a name=\"command-generate\"><p><code>generate</code></p>\n</a></h3>\n\n<p>Generate spec files.</p>\n<p><strong>Usage:</strong></p>\n<pre><code class=\"language-sh\">testea generate\n</code></pre>\n<h3><a name=\"command-help\"><p><code>help</code></p>\n</a></h3>\n\n<p>Display help.</p>\n<p><strong>Usage:</strong></p>\n<pre><code class=\"language-sh\">testea <span class=\"hljs-built_in\">help</span>\n</code></pre>\n<h3><a name=\"command-*\"><p><code>*</code></p>\n</a></h3>\n\n<p>Any other command is not suppoted.</p>\n<p><strong>Usage:</strong></p>\n<pre><code class=\"language-sh\">testea &lt;cmd&gt;\n</code></pre>\n</section>\n","toc":[{"title":"Command overview","level":2,"id":"cli-command-overview"},{"title":"Command reference","level":2,"id":"cli-command-reference"},{"title":"`generate`","level":3,"id":"command-generate"},{"title":"`help`","level":3,"id":"command-help"},{"title":"`*`","level":3,"id":"command-*"}]}}}
